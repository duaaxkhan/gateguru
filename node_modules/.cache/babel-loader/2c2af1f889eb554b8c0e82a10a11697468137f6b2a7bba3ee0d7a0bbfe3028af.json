{"ast":null,"code":"var _jsxFileName = \"/Users/duaashahid/Desktop/gateguru/client/src/components/Dplot.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { useEffect, useState } from 'react'\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile=(file)=>{\n//     const storage= getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//        setVideoPerc(Math.round(progress));\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         switch (error.code) {\n//           case \"storage/unauthorized\":\n//             // User doesn't have permission to access the object\n//             console.log(error);\n//             break;\n//           case \"storage/canceled\":\n//             // User canceled the upload\n//             break;\n//           case \"storage/unknown\":\n//             // Unknown error occurred, inspect error.serverResponse\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       () => {\n//         // Upload completed successfully, now we can get the download URL\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//                downloadURL,\n//             };\n//           });\n\n//         });\n//       }\n//     );\n\n//   }\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   try {\n//   //     await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//   //     window.location.reload();\n//   //   } catch (error) {\n//   //     console.log(error);\n//   //   }\n//   // };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//         await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//         window.location.reload();\n//     } catch (error) {\n//         console.log(\"Error:\", error);\n//         if (error.response) {\n//             // Request was made and server responded with a status code\n//             console.log(\"Status code:\", error.response.status);\n//             console.log(\"Response data:\", error.response.data);\n//         } else if (error.request) {\n//             // Request was made but no response was received\n//             console.log(\"No response received:\", error.request);\n//         } else {\n//             // Something else went wrong\n//             console.log(\"Error:\", error.message);\n//         }\n//     }\n// };\n\n//   // http://localhost:5000/api/videos\n\n//   const divStyle = {\n//     position: \"relative\", // Make the div relative\n//     // Add other CSS styles as needed\n//   };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\" style={divStyle}>\n//         <video\n//           autoPlay\n//           loop\n//           muted\n//           id=\"video\"\n//           className=\"w-full h-[700px] \"\n//         >\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//       {/* <div className=\" w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//       <h1 className=\"text-5xl text-white font-semibold pt-20 md:mx-90\"style={{fontFamily: 'Roboto ',textAlign:\"center\"}}> Upload your video !</h1>\n\n//        <button className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//       </div> */}\n\n//       <div className=\"upload bg-black text-white mt-20 w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\" >\n\n//         <form onSubmit={handleSubmit}> \n//         <label htmlFor=\"video\">Video:</label> {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//         <br/>\n//         <input\n//         type=\"file\"\n//         accept=\"video/*\"\n//         id=\"video\"       \n//         onChange={(e) => setVideo((prev) => e.target.files[0])}\n//          />\n//         <br/>\n//         <button  type=\"submit\" className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//         </form>\n//       </div>\n\n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   const [processedVideoData, setProcessedVideoData] = useState(null);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//       // window.location.reload();\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   const handleFetchProcessedVideo = async () => {\n//     try {\n//       const response = await axios.get(`http://127.0.0.1:5000/api/output-video`, { responseType: 'arraybuffer' });\n//       console.log(\"Response:\", response);\n\n//       // Create a Blob from the array buffer\n//       const blob = new Blob([response.data], { type: 'video/mp4' });\n\n//       // Generate a URL for the blob\n//       const url = URL.createObjectURL(blob);\n\n//       // Set the URL as the source for the video element\n//       setProcessedVideoData(url);\n//     } catch (error) {\n//       console.log(\"Error fetching processed video:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px]\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white mt-20 w-full md:h-[1100px] sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br />\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 my-20 p-4 hover:bg-[#F1F8FF] ml-8 rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '200px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n\n//           <br />\n//           <button\n//             onClick={handleFetchProcessedVideo}\n//             className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n//             style={{ width: '200px' }}\n//           >\n//             Fetch Processed Video\n//           </button>\n//           <br />\n//           {processedVideoData && (\n//   <video autoPlay controls className=\"w-[800px] h-[800px]\">\n//     <source src={processedVideoData} type=\"video/mp4\" />\n//     Your browser does not support the video tag.\n//   </video>\n// )}\n\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Navbar from \"./Navbar\";\nimport videoF from \"../../src/pictures-olive/vi.mp4\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dplot() {\n  _s();\n  const [video, setVideo] = useState(undefined);\n  const [videoPerc, setVideoPerc] = useState(0);\n  const [processedVideoData, setProcessedVideoData] = useState(null);\n  useEffect(() => {\n    video && uploadFile(video);\n  }, [video]);\n  const uploadFile = file => {\n    const formData = new FormData();\n    formData.append(\"video\", file);\n    axios.post(\"http://127.0.0.1:5000/api/videos\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      },\n      onUploadProgress: progressEvent => {\n        const progress = Math.round(progressEvent.loaded / progressEvent.total * 100);\n        setVideoPerc(progress);\n        console.log(`Upload progress: ${progress}%`);\n      }\n    }).then(() => {\n      console.log(\"Video uploaded successfully\");\n    }).catch(error => {\n      console.log(\"Error uploading video:\", error);\n    });\n  };\n  const handleFetchProcessedVideo = async () => {\n    try {\n      const response = await axios.get(\"http://127.0.0.1:5000/api/output-video\", {\n        responseType: \"blob\"\n      });\n      const url = URL.createObjectURL(response.data);\n      setProcessedVideoData(url);\n    } catch (error) {\n      console.log(\"Error fetching processed video:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-black h-full\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full h-[950px] py-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        loop: true,\n        muted: true,\n        id: \"video\",\n        className: \"w-full h-[700px]\",\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: videoF,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload bg-black text-white mt-20 w-full md:h-[1100px] sm:h-[800px] pt-5 text-white flex flex-col items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"video\",\n          children: \"Video:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this), videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"video/*\",\n          id: \"video\",\n          onChange: e => setVideo(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleFetchProcessedVideo,\n          className: \"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\",\n          style: {\n            width: \"200px\"\n          },\n          children: \"Fetch Processed Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this), processedVideoData && /*#__PURE__*/_jsxDEV(\"video\", {\n          autoPlay: true,\n          controls: true,\n          className: \"w-[800px] h-[800px]\",\n          children: [/*#__PURE__*/_jsxDEV(\"source\", {\n            src: processedVideoData,\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this), \"Your browser does not support the video tag.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 378,\n    columnNumber: 5\n  }, this);\n}\n_s(Dplot, \"zlxc2DiyRBr21px6JKIU19u/jWg=\");\n_c = Dplot;\nexport default Dplot;\nvar _c;\n$RefreshReg$(_c, \"Dplot\");","map":{"version":3,"names":["React","useState","useEffect","axios","Navbar","videoF","jsxDEV","_jsxDEV","Dplot","_s","video","setVideo","undefined","videoPerc","setVideoPerc","processedVideoData","setProcessedVideoData","uploadFile","file","formData","FormData","append","post","headers","onUploadProgress","progressEvent","progress","Math","round","loaded","total","console","log","then","catch","error","handleFetchProcessedVideo","response","get","responseType","url","URL","createObjectURL","data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","autoPlay","loop","muted","id","src","type","htmlFor","accept","onChange","e","target","files","onClick","style","width","controls","_c","$RefreshReg$"],"sources":["/Users/duaashahid/Desktop/gateguru/client/src/components/Dplot.jsx"],"sourcesContent":["// import React from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { useEffect, useState } from 'react'\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n\n\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n\n\n\n// function Dplot() {\n\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile=(file)=>{\n//     const storage= getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//        setVideoPerc(Math.round(progress));\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         switch (error.code) {\n//           case \"storage/unauthorized\":\n//             // User doesn't have permission to access the object\n//             console.log(error);\n//             break;\n//           case \"storage/canceled\":\n//             // User canceled the upload\n//             break;\n//           case \"storage/unknown\":\n//             // Unknown error occurred, inspect error.serverResponse\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       () => {\n//         // Upload completed successfully, now we can get the download URL\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//                downloadURL,\n//             };\n//           });\n\n//         });\n//       }\n//     );\n\n//   }\n\n\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   try {\n//   //     await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//   //     window.location.reload();\n//   //   } catch (error) {\n//   //     console.log(error);\n//   //   }\n//   // };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//         await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//         window.location.reload();\n//     } catch (error) {\n//         console.log(\"Error:\", error);\n//         if (error.response) {\n//             // Request was made and server responded with a status code\n//             console.log(\"Status code:\", error.response.status);\n//             console.log(\"Response data:\", error.response.data);\n//         } else if (error.request) {\n//             // Request was made but no response was received\n//             console.log(\"No response received:\", error.request);\n//         } else {\n//             // Something else went wrong\n//             console.log(\"Error:\", error.message);\n//         }\n//     }\n// };\n\n//   // http://localhost:5000/api/videos\n\n//   const divStyle = {\n//     position: \"relative\", // Make the div relative\n//     // Add other CSS styles as needed\n//   };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\" style={divStyle}>\n//         <video\n//           autoPlay\n//           loop\n//           muted\n//           id=\"video\"\n//           className=\"w-full h-[700px] \"\n//         >\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n          \n//       {/* <div className=\" w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//       <h1 className=\"text-5xl text-white font-semibold pt-20 md:mx-90\"style={{fontFamily: 'Roboto ',textAlign:\"center\"}}> Upload your video !</h1>\n      \n//        <button className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n  \n//       </div> */}\n\n//       <div className=\"upload bg-black text-white mt-20 w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\" >\n        \n//         <form onSubmit={handleSubmit}> \n//         <label htmlFor=\"video\">Video:</label> {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//         <br/>\n//         <input\n//         type=\"file\"\n//         accept=\"video/*\"\n//         id=\"video\"       \n//         onChange={(e) => setVideo((prev) => e.target.files[0])}\n//          />\n//         <br/>\n//         <button  type=\"submit\" className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//         </form>\n//       </div>\n\n      \n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n\n\n\n\n\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   const [processedVideoData, setProcessedVideoData] = useState(null);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//       // window.location.reload();\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   const handleFetchProcessedVideo = async () => {\n//     try {\n//       const response = await axios.get(`http://127.0.0.1:5000/api/output-video`, { responseType: 'arraybuffer' });\n//       console.log(\"Response:\", response);\n  \n//       // Create a Blob from the array buffer\n//       const blob = new Blob([response.data], { type: 'video/mp4' });\n  \n//       // Generate a URL for the blob\n//       const url = URL.createObjectURL(blob);\n  \n//       // Set the URL as the source for the video element\n//       setProcessedVideoData(url);\n//     } catch (error) {\n//       console.log(\"Error fetching processed video:\", error);\n//     }\n//   };\n  \n  \n  \n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px]\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white mt-20 w-full md:h-[1100px] sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br />\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 my-20 p-4 hover:bg-[#F1F8FF] ml-8 rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '200px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n          \n//           <br />\n//           <button\n//             onClick={handleFetchProcessedVideo}\n//             className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n//             style={{ width: '200px' }}\n//           >\n//             Fetch Processed Video\n//           </button>\n//           <br />\n//           {processedVideoData && (\n//   <video autoPlay controls className=\"w-[800px] h-[800px]\">\n//     <source src={processedVideoData} type=\"video/mp4\" />\n//     Your browser does not support the video tag.\n//   </video>\n// )}\n\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport Navbar from \"./Navbar\";\nimport videoF from \"../../src/pictures-olive/vi.mp4\";\n\nfunction Dplot() {\n  const [video, setVideo] = useState(undefined);\n  const [videoPerc, setVideoPerc] = useState(0);\n  const [processedVideoData, setProcessedVideoData] = useState(null);\n\n  useEffect(() => {\n    video && uploadFile(video);\n  }, [video]);\n\n  const uploadFile = (file) => {\n    const formData = new FormData();\n    formData.append(\"video\", file);\n\n    axios\n      .post(\"http://127.0.0.1:5000/api/videos\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n        onUploadProgress: (progressEvent) => {\n          const progress = Math.round(\n            (progressEvent.loaded / progressEvent.total) * 100\n          );\n          setVideoPerc(progress);\n          console.log(`Upload progress: ${progress}%`);\n        },\n      })\n      .then(() => {\n        console.log(\"Video uploaded successfully\");\n      })\n      .catch((error) => {\n        console.log(\"Error uploading video:\", error);\n      });\n  };\n\n  const handleFetchProcessedVideo = async () => {\n    try {\n      const response = await axios.get(\n        \"http://127.0.0.1:5000/api/output-video\",\n        { responseType: \"blob\" }\n      );\n\n      const url = URL.createObjectURL(response.data);\n      setProcessedVideoData(url);\n    } catch (error) {\n      console.log(\"Error fetching processed video:\", error);\n    }\n  };\n\n  return (\n    <div className=\"bg-black h-full\">\n      <Navbar />\n      <div className=\"relative w-full h-[950px] py-20\">\n        <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px]\">\n          <source src={videoF} type=\"video/mp4\" />\n        </video>\n\n        <div className=\"upload bg-black text-white mt-20 w-full md:h-[1100px] sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n          <label htmlFor=\"video\">Video:</label>\n          {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n          <br />\n          <input\n            type=\"file\"\n            accept=\"video/*\"\n            id=\"video\"\n            onChange={(e) => setVideo(e.target.files[0])}\n          />\n          <br />\n\n          <button\n            onClick={handleFetchProcessedVideo}\n            className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n            style={{ width: \"200px\" }}\n          >\n            Fetch Processed Video\n          </button>\n          <br />\n          {processedVideoData && (\n            <video autoPlay controls className=\"w-[800px] h-[800px]\">\n              <source src={processedVideoData} type=\"video/mp4\" />\n              Your browser does not support the video tag.\n            </video>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dplot;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAKA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAUA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;A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"},"metadata":{},"sourceType":"module","externalDependencies":[]}