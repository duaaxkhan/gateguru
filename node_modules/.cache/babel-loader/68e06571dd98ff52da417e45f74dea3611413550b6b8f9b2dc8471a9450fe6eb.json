{"ast":null,"code":"var _jsxFileName = \"/Users/duaashahid/Desktop/gateguru/client/src/components/Dplot.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { useEffect, useState } from 'react'\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile=(file)=>{\n//     const storage= getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//        setVideoPerc(Math.round(progress));\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         switch (error.code) {\n//           case \"storage/unauthorized\":\n//             // User doesn't have permission to access the object\n//             console.log(error);\n//             break;\n//           case \"storage/canceled\":\n//             // User canceled the upload\n//             break;\n//           case \"storage/unknown\":\n//             // Unknown error occurred, inspect error.serverResponse\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       () => {\n//         // Upload completed successfully, now we can get the download URL\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//                downloadURL,\n//             };\n//           });\n\n//         });\n//       }\n//     );\n\n//   }\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   try {\n//   //     await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//   //     window.location.reload();\n//   //   } catch (error) {\n//   //     console.log(error);\n//   //   }\n//   // };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//         await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//         window.location.reload();\n//     } catch (error) {\n//         console.log(\"Error:\", error);\n//         if (error.response) {\n//             // Request was made and server responded with a status code\n//             console.log(\"Status code:\", error.response.status);\n//             console.log(\"Response data:\", error.response.data);\n//         } else if (error.request) {\n//             // Request was made but no response was received\n//             console.log(\"No response received:\", error.request);\n//         } else {\n//             // Something else went wrong\n//             console.log(\"Error:\", error.message);\n//         }\n//     }\n// };\n\n//   // http://localhost:5000/api/videos\n\n//   const divStyle = {\n//     position: \"relative\", // Make the div relative\n//     // Add other CSS styles as needed\n//   };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\" style={divStyle}>\n//         <video\n//           autoPlay\n//           loop\n//           muted\n//           id=\"video\"\n//           className=\"w-full h-[700px] \"\n//         >\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//       {/* <div className=\" w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//       <h1 className=\"text-5xl text-white font-semibold pt-20 md:mx-90\"style={{fontFamily: 'Roboto ',textAlign:\"center\"}}> Upload your video !</h1>\n\n//        <button className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//       </div> */}\n\n//       <div className=\"upload bg-black text-white mt-20 w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\" >\n\n//         <form onSubmit={handleSubmit}> \n//         <label htmlFor=\"video\">Video:</label> {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//         <br/>\n//         <input\n//         type=\"file\"\n//         accept=\"video/*\"\n//         id=\"video\"       \n//         onChange={(e) => setVideo((prev) => e.target.files[0])}\n//          />\n//         <br/>\n//         <button  type=\"submit\" className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//         </form>\n//       </div>\n\n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   // const [processedVideoData, setProcessedVideoData] = useState(null);\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder =  \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage,folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//       // window.location.reload();\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleFetchProcessedVideo = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/output-video`, { responseType: 'arraybuffer' });\n//   //     console.log(\"Response:\", response);\n\n//   //     // Create a Blob from the array buffer\n//   //     const blob = new Blob([response.data], { type: 'video/mp4' });\n\n//   //     // Generate a URL for the blob\n//   //     const url = URL.createObjectURL(blob);\n\n//   //     // Set the URL as the source for the video element\n//   //     setProcessedVideoData(url);\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching processed video:\", error);\n//   //   }\n//   // };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br />\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '250px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n\n//           <br />\n\n//           <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n\n//           <br/>\n\n//           {/* <button\n//             onClick={handleFetchProcessedVideo}\n//             className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n//             style={{ width: '200px' }}\n//           >\n//             Fetch Processed Video\n//           </button>\n//           <br />\n//           {processedVideoData && (\n//             <video autoPlay controls className=\"w-[800px] h-[800px]\">\n//               <source src={processedVideoData} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           )} */}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n/////////prettty pleasinnnnnn\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { getDownloadURL,uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\n// import app from '../firebase';\n// import Navbar from \"./Navbar\";\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder = \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleDownload = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/download-video`);\n//   //     const { videoURL,jsonURLs} = response.data;\n\n//   //     // Log processed video URL\n//   //     console.log('Processed Video URL:', videoURL);\n\n//   //     // // Log JSON file URLs\n//   //     // console.log('JSON File URLs:');\n//   //     // jsonURLs.forEach((url, index) => {\n//   //     //   console.log(`JSON File ${index + 1}:`, url);\n//   //     // });\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching video URLs:\", error);\n//   //   }\n//   // };\n\n//   //try 1 the issue was video was not playing\n\n// //   const handleDownload = async () => {\n// //     try {\n// //         const response = await axios.get(`http://127.0.0.1:5000/api/download-video`, {\n// //             responseType: 'blob' // Specify responseType as 'blob'\n// //         });\n// //         const { videoURL } = response.data;\n\n// //         // Log processed video URL\n// //         console.log('Processed Video URL:', videoURL);\n\n// //         // Create a temporary URL for the blob\n// //         const url = window.URL.createObjectURL(new Blob([response.data]));\n\n// //         // Create a link element\n// //         const link = document.createElement('a');\n// //         link.href = url;\n// //         link.setAttribute('download', 'downloaded-video.mp4');\n\n// //         // Append the link to the body\n// //         document.body.appendChild(link);\n\n// //         // Programmatically click the link to trigger the download\n// //         link.click();\n\n// //         // Cleanup: remove the link and revoke the blob URL\n// //         link.parentNode.removeChild(link);\n// //         window.URL.revokeObjectURL(url);\n\n// //     } catch (error) {\n// //         console.log(\"Error fetching video URLs:\", error);\n// //     }\n// // };\n\n// //try 2\n// const handleDownload = async () => {\n//   try {\n//       // Send a GET request to the server to fetch the video file\n//       const response = await fetch('http://127.0.0.1:5000/api/download-video');\n\n//       // Check if the response is successful (status code 200)\n//       if (!response.ok) {\n//           throw new Error('Failed to fetch video');\n//       }\n\n//       // Extract the filename from the response headers or set a default name\n//       const filename = response.headers.get('content-disposition')?.split('filename=')[1] || 'downloaded-video.mp4';\n\n//       // Convert the response to a blob\n//       const blob = await response.blob();\n\n//       // Create a temporary URL for the blob\n//       const url = window.URL.createObjectURL(blob);\n\n//       // Create a link element to trigger the download\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n\n//       // Append the link to the document body and programmatically click it\n//       document.body.appendChild(link);\n//       link.click();\n\n//       // Clean up by removing the link and revoking the object URL\n//       link.parentNode.removeChild(link);\n//       window.URL.revokeObjectURL(url);\n//   } catch (error) {\n//       console.error('Error downloading video:', error);\n//   }\n// };\n\n// const handlePlay = () => {\n//  // Replace 'path/to/your/video.mp4' with the actual path to your video file\n//   const videoPath = '/Users/duaashahid/Desktop/gateguru/flask_backend/output/output_video.mp4';\n\n//   // Create a new video element\n//   const video = document.createElement('video');\n//   video.src = videoPath;\n//   video.controls = true; // Show controls like play, pause, etc.\n\n//   // Append the video element to the document body\n//   document.body.appendChild(video);\n\n//   // Play the video\n//   video.play();\n\n//   // <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//   //         <source src={videoFo} type=\"video/mp4\" />\n//   //       </video>\n// };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <h1 className=\"mt-10 mb-6 text-center text-white text-3xl\">Getting 3D Plots</h1>\n//         <p className=\"text-center text-white mb-6 text-lg mt-10\">\n//           Upload your walking video to get get 3D joint point pin pointed on your body, You can download the video by clicking on the Download Processed Video\n//         </p>\n\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n\n//             <br/>\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF] ml-2  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n\n//           <br />\n\n//           <button\n//               onClick={handleDownload}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n//             <br/>\n//             <button\n//              onClick={handlePlay}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Play\n//             </button>\n\n//           <br/>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { getDownloadURL, uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\nimport app from '../firebase';\nimport Navbar from \"./Navbar\";\nimport videoF from \"../../src/pictures-olive/vi.mp4\";\nimport Newsletter from '../Newsl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dplot() {\n  _s();\n  const [video, setVideo] = useState(undefined);\n  const [videoPerc, setVideoPerc] = useState(0);\n  const [inputs, setInputs] = useState({});\n  const [streamedBytes, setStreamedBytes] = useState(0);\n  const [totalBytes, setTotalBytes] = useState(0);\n  const [downloadedVideoURL, setDownloadedVideoURL] = useState(\"\");\n  const videoRef = useRef(null);\n  useEffect(() => {\n    video && uploadFile(video);\n  }, [video]);\n  const uploadFile = file => {\n    const storage = getStorage(app);\n    const folder = \"input_videos/\";\n    const fileName = new Date().getTime() + file.name;\n    const storageRef = ref(storage, folder + fileName);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n    uploadTask.on(\"state_changed\", snapshot => {\n      const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      setVideoPerc(Math.round(progress));\n      console.log(`Upload progress: ${Math.round(progress)}%`);\n      setStreamedBytes(snapshot.bytesTransferred);\n      setTotalBytes(snapshot.totalBytes);\n      switch (snapshot.state) {\n        case \"paused\":\n          console.log(\"Upload is paused\");\n          break;\n        case \"running\":\n          console.log(\"Upload is running\");\n          break;\n        default:\n          break;\n      }\n    }, error => {\n      console.log(\"Upload error:\", error);\n    }, () => {\n      getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n        console.log('DownloadURL - ', downloadURL);\n        setInputs(prev => {\n          return {\n            ...prev,\n            downloadURL\n          };\n        });\n      });\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(`http://127.0.0.1:5000/api/videos`, {\n        ...inputs\n      });\n      console.log('Video uploaded successfully');\n    } catch (error) {\n      console.log(\"Error uploading video:\", error);\n    }\n  };\n  const handleDownloadAndPlay = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/download-video');\n      if (!response.ok) {\n        throw new Error('Failed to fetch video');\n      }\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      console.log(\"Downloaded video URL:\", url);\n      setDownloadedVideoURL(url);\n\n      // Create a link element to trigger the download\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'downloaded_video.mp4');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error downloading video:', error);\n    }\n  };\n  useEffect(() => {\n    if (downloadedVideoURL && videoRef.current) {\n      videoRef.current.src = downloadedVideoURL;\n      videoRef.current.load();\n      videoRef.current.play().catch(error => console.error('Error playing video:', error));\n    }\n  }, [downloadedVideoURL]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-black h-full\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mt-10 mb-6 text-center text-white text-3xl\",\n      children: \"Getting 3D Plots\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 702,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-white mb-6 text-lg mt-10\",\n      children: \"Upload your walking video to get 3D joint points pin pointed on your body. You can download the video by clicking on the Download Processed Video.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full h-[950px]\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        loop: true,\n        muted: true,\n        id: \"video\",\n        className: \"w-full h-[700px] mt-40\",\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: videoF,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload bg-black text-white w-full md:h-[1100px] sm:h-[800px] text-white flex flex-col items-center justify-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"video\",\n            children: \"Video:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 13\n          }, this), videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"video/*\",\n            id: \"video\",\n            onChange: e => setVideo(e.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF] ml-2 rounded-full hover:text-black border-white border-3\",\n            style: {\n              width: '350px'\n            },\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDownloadAndPlay,\n          className: \"font-large texl-3xl hover:scale-110 mt-10 p-4 hover:bg-[#F1F8FF] rounded-full hover:text-black border-white border-3\",\n          style: {\n            width: '350px'\n          },\n          children: \"Download and Play Processed Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 712,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Newsletter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 700,\n    columnNumber: 5\n  }, this);\n}\n_s(Dplot, \"MCoFliXeaYHnQ3GJgPKScZtz6JA=\");\n_c = Dplot;\nexport default Dplot;\n\n//https://firebasestorage.googleapis.com/v0/b/gaitguru-backend.appspot.com/o/processed_videos%2Foutput_video.mp4?alt=media&token=429490ca-006a-499f-9116-98d726c47a00\nvar _c;\n$RefreshReg$(_c, \"Dplot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","getDownloadURL","uploadBytesResumable","ref","getStorage","app","Navbar","videoF","Newsletter","jsxDEV","_jsxDEV","Dplot","_s","video","setVideo","undefined","videoPerc","setVideoPerc","inputs","setInputs","streamedBytes","setStreamedBytes","totalBytes","setTotalBytes","downloadedVideoURL","setDownloadedVideoURL","videoRef","uploadFile","file","storage","folder","fileName","Date","getTime","name","storageRef","uploadTask","on","snapshot","progress","bytesTransferred","Math","round","console","log","state","error","then","downloadURL","prev","handleSubmit","e","preventDefault","post","handleDownloadAndPlay","response","fetch","ok","Error","blob","url","window","URL","createObjectURL","link","document","createElement","href","setAttribute","body","appendChild","click","removeChild","current","src","load","play","catch","className","children","_jsxFileName","lineNumber","columnNumber","autoPlay","loop","muted","id","type","onSubmit","htmlFor","accept","onChange","target","files","style","width","onClick","_c","$RefreshReg$"],"sources":["/Users/duaashahid/Desktop/gateguru/client/src/components/Dplot.jsx"],"sourcesContent":["// import React from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { useEffect, useState } from 'react'\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n\n\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n\n\n\n// function Dplot() {\n\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile=(file)=>{\n//     const storage= getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//        setVideoPerc(Math.round(progress));\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         switch (error.code) {\n//           case \"storage/unauthorized\":\n//             // User doesn't have permission to access the object\n//             console.log(error);\n//             break;\n//           case \"storage/canceled\":\n//             // User canceled the upload\n//             break;\n//           case \"storage/unknown\":\n//             // Unknown error occurred, inspect error.serverResponse\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       () => {\n//         // Upload completed successfully, now we can get the download URL\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//                downloadURL,\n//             };\n//           });\n\n//         });\n//       }\n//     );\n\n//   }\n\n\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   try {\n//   //     await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//   //     window.location.reload();\n//   //   } catch (error) {\n//   //     console.log(error);\n//   //   }\n//   // };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//         await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//         window.location.reload();\n//     } catch (error) {\n//         console.log(\"Error:\", error);\n//         if (error.response) {\n//             // Request was made and server responded with a status code\n//             console.log(\"Status code:\", error.response.status);\n//             console.log(\"Response data:\", error.response.data);\n//         } else if (error.request) {\n//             // Request was made but no response was received\n//             console.log(\"No response received:\", error.request);\n//         } else {\n//             // Something else went wrong\n//             console.log(\"Error:\", error.message);\n//         }\n//     }\n// };\n\n//   // http://localhost:5000/api/videos\n\n//   const divStyle = {\n//     position: \"relative\", // Make the div relative\n//     // Add other CSS styles as needed\n//   };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\" style={divStyle}>\n//         <video\n//           autoPlay\n//           loop\n//           muted\n//           id=\"video\"\n//           className=\"w-full h-[700px] \"\n//         >\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n          \n//       {/* <div className=\" w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//       <h1 className=\"text-5xl text-white font-semibold pt-20 md:mx-90\"style={{fontFamily: 'Roboto ',textAlign:\"center\"}}> Upload your video !</h1>\n      \n//        <button className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n  \n//       </div> */}\n\n//       <div className=\"upload bg-black text-white mt-20 w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\" >\n        \n//         <form onSubmit={handleSubmit}> \n//         <label htmlFor=\"video\">Video:</label> {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//         <br/>\n//         <input\n//         type=\"file\"\n//         accept=\"video/*\"\n//         id=\"video\"       \n//         onChange={(e) => setVideo((prev) => e.target.files[0])}\n//          />\n//         <br/>\n//         <button  type=\"submit\" className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//         </form>\n//       </div>\n\n      \n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   // const [processedVideoData, setProcessedVideoData] = useState(null);\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder =  \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage,folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//       // window.location.reload();\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleFetchProcessedVideo = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/output-video`, { responseType: 'arraybuffer' });\n//   //     console.log(\"Response:\", response);\n  \n//   //     // Create a Blob from the array buffer\n//   //     const blob = new Blob([response.data], { type: 'video/mp4' });\n  \n//   //     // Generate a URL for the blob\n//   //     const url = URL.createObjectURL(blob);\n  \n//   //     // Set the URL as the source for the video element\n//   //     setProcessedVideoData(url);\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching processed video:\", error);\n//   //   }\n//   // };\n  \n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br />\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '250px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n          \n//           <br />\n\n//           <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n\n//           <br/>\n\n//           {/* <button\n//             onClick={handleFetchProcessedVideo}\n//             className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n//             style={{ width: '200px' }}\n//           >\n//             Fetch Processed Video\n//           </button>\n//           <br />\n//           {processedVideoData && (\n//             <video autoPlay controls className=\"w-[800px] h-[800px]\">\n//               <source src={processedVideoData} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           )} */}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n\n\n\n\n\n\n\n\n\n\n/////////prettty pleasinnnnnn\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { getDownloadURL,uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\n// import app from '../firebase';\n// import Navbar from \"./Navbar\";\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder = \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleDownload = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/download-video`);\n//   //     const { videoURL,jsonURLs} = response.data;\n      \n//   //     // Log processed video URL\n//   //     console.log('Processed Video URL:', videoURL);\n  \n//   //     // // Log JSON file URLs\n//   //     // console.log('JSON File URLs:');\n//   //     // jsonURLs.forEach((url, index) => {\n//   //     //   console.log(`JSON File ${index + 1}:`, url);\n//   //     // });\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching video URLs:\", error);\n//   //   }\n//   // };\n\n\n//   //try 1 the issue was video was not playing\n\n// //   const handleDownload = async () => {\n// //     try {\n// //         const response = await axios.get(`http://127.0.0.1:5000/api/download-video`, {\n// //             responseType: 'blob' // Specify responseType as 'blob'\n// //         });\n// //         const { videoURL } = response.data;\n        \n// //         // Log processed video URL\n// //         console.log('Processed Video URL:', videoURL);\n\n// //         // Create a temporary URL for the blob\n// //         const url = window.URL.createObjectURL(new Blob([response.data]));\n\n// //         // Create a link element\n// //         const link = document.createElement('a');\n// //         link.href = url;\n// //         link.setAttribute('download', 'downloaded-video.mp4');\n\n// //         // Append the link to the body\n// //         document.body.appendChild(link);\n\n// //         // Programmatically click the link to trigger the download\n// //         link.click();\n\n// //         // Cleanup: remove the link and revoke the blob URL\n// //         link.parentNode.removeChild(link);\n// //         window.URL.revokeObjectURL(url);\n\n// //     } catch (error) {\n// //         console.log(\"Error fetching video URLs:\", error);\n// //     }\n// // };\n\n\n// //try 2\n// const handleDownload = async () => {\n//   try {\n//       // Send a GET request to the server to fetch the video file\n//       const response = await fetch('http://127.0.0.1:5000/api/download-video');\n      \n//       // Check if the response is successful (status code 200)\n//       if (!response.ok) {\n//           throw new Error('Failed to fetch video');\n//       }\n\n//       // Extract the filename from the response headers or set a default name\n//       const filename = response.headers.get('content-disposition')?.split('filename=')[1] || 'downloaded-video.mp4';\n\n//       // Convert the response to a blob\n//       const blob = await response.blob();\n\n//       // Create a temporary URL for the blob\n//       const url = window.URL.createObjectURL(blob);\n\n//       // Create a link element to trigger the download\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n\n//       // Append the link to the document body and programmatically click it\n//       document.body.appendChild(link);\n//       link.click();\n\n//       // Clean up by removing the link and revoking the object URL\n//       link.parentNode.removeChild(link);\n//       window.URL.revokeObjectURL(url);\n//   } catch (error) {\n//       console.error('Error downloading video:', error);\n//   }\n// };\n\n// const handlePlay = () => {\n//  // Replace 'path/to/your/video.mp4' with the actual path to your video file\n//   const videoPath = '/Users/duaashahid/Desktop/gateguru/flask_backend/output/output_video.mp4';\n\n//   // Create a new video element\n//   const video = document.createElement('video');\n//   video.src = videoPath;\n//   video.controls = true; // Show controls like play, pause, etc.\n\n//   // Append the video element to the document body\n//   document.body.appendChild(video);\n\n//   // Play the video\n//   video.play();\n\n\n//   // <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//   //         <source src={videoFo} type=\"video/mp4\" />\n//   //       </video>\n// };\n\n  \n  \n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <h1 className=\"mt-10 mb-6 text-center text-white text-3xl\">Getting 3D Plots</h1>\n//         <p className=\"text-center text-white mb-6 text-lg mt-10\">\n//           Upload your walking video to get get 3D joint point pin pointed on your body, You can download the video by clicking on the Download Processed Video\n//         </p>\n\n      \n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n            \n//             <br/>\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF] ml-2  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n          \n//           <br />\n\n//           <button\n//               onClick={handleDownload}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n//             <br/>\n//             <button\n//              onClick={handlePlay}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Play\n//             </button>\n\n//           <br/>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { getDownloadURL, uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\nimport app from '../firebase';\nimport Navbar from \"./Navbar\";\nimport videoF from \"../../src/pictures-olive/vi.mp4\";\nimport Newsletter from '../Newsl'\n\nfunction Dplot() {\n  const [video, setVideo] = useState(undefined);\n  const [videoPerc, setVideoPerc] = useState(0);\n  const [inputs, setInputs] = useState({});\n  const [streamedBytes, setStreamedBytes] = useState(0);\n  const [totalBytes, setTotalBytes] = useState(0);\n  const [downloadedVideoURL, setDownloadedVideoURL] = useState(\"\");\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    video && uploadFile(video);\n  }, [video]);\n\n  const uploadFile = (file) => {\n    const storage = getStorage(app);\n    const folder = \"input_videos/\";\n    const fileName = new Date().getTime() + file.name;\n    const storageRef = ref(storage, folder + fileName);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n\n    uploadTask.on(\n      \"state_changed\",\n      (snapshot) => {\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        setVideoPerc(Math.round(progress));\n        console.log(`Upload progress: ${Math.round(progress)}%`);\n        setStreamedBytes(snapshot.bytesTransferred);\n        setTotalBytes(snapshot.totalBytes);\n        switch (snapshot.state) {\n          case \"paused\":\n            console.log(\"Upload is paused\");\n            break;\n          case \"running\":\n            console.log(\"Upload is running\");\n            break;\n          default:\n            break;\n        }\n      },\n      (error) => {\n        console.log(\"Upload error:\", error);\n      },\n      () => {\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('DownloadURL - ', downloadURL);\n          setInputs((prev) => {\n            return {\n              ...prev,\n              downloadURL,\n            };\n          });\n        });\n      }\n    );\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n      console.log('Video uploaded successfully');\n    } catch (error) {\n      console.log(\"Error uploading video:\", error);\n    }\n  };\n\n  const handleDownloadAndPlay = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/download-video');\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch video');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      console.log(\"Downloaded video URL:\", url);\n      setDownloadedVideoURL(url);\n\n      // Create a link element to trigger the download\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'downloaded_video.mp4');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error downloading video:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (downloadedVideoURL && videoRef.current) {\n      videoRef.current.src = downloadedVideoURL;\n      videoRef.current.load();\n      videoRef.current.play().catch(error => console.error('Error playing video:', error));\n    }\n  }, [downloadedVideoURL]);\n\n  return (\n    <div className=\"bg-black h-full\">\n      <Navbar />\n      <h1 className=\"mt-10 mb-6 text-center text-white text-3xl\">Getting 3D Plots</h1>\n      <p className=\"text-center text-white mb-6 text-lg mt-10\">\n        Upload your walking video to get 3D joint points pin pointed on your body. You can download the video by clicking on the Download Processed Video.\n      </p>\n\n      <div className=\"relative w-full h-[950px]\">\n        <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n          <source src={videoF} type=\"video/mp4\" />\n        </video>\n\n        <div className=\"upload bg-black text-white w-full md:h-[1100px] sm:h-[800px] text-white flex flex-col items-center justify-center\">\n          <form onSubmit={handleSubmit}>\n            <label htmlFor=\"video\">Video:</label>\n            {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n            <br />\n            <input\n              type=\"file\"\n              accept=\"video/*\"\n              id=\"video\"\n              onChange={(e) => setVideo(e.target.files[0])}\n            />\n            <br />\n            <button\n              type=\"submit\"\n              className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF] ml-2 rounded-full hover:text-black border-white border-3\"\n              style={{ width: '350px' }}\n            >\n              Upload\n            </button>\n          </form>\n          <br />\n          <button\n            onClick={handleDownloadAndPlay}\n            className=\"font-large texl-3xl hover:scale-110 mt-10 p-4 hover:bg-[#F1F8FF] rounded-full hover:text-black border-white border-3\"\n            style={{ width: '350px' }}\n          >\n            Download and Play Processed Video\n          </button>\n          <br />\n          {/* <div className=\"mt-10\">\n            <video controls className=\"w-full h-auto\" ref={videoRef}>\n              <source src={downloadedVideoURL}\n               type=\"video/mp4\" />\n              Your browser does not support the video tag.\n            </video>\n          </div> */}\n        </div>\n        <Newsletter/>\n      </div>\n    </div>\n  );\n}\n\nexport default Dplot;\n\n\n//https://firebasestorage.googleapis.com/v0/b/gaitguru-backend.appspot.com/o/processed_videos%2Foutput_video.mp4?alt=media&token=429490ca-006a-499f-9116-98d726c47a00"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAKA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAYA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}