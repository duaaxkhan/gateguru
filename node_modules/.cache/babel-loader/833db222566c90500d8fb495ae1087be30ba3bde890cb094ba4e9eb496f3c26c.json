{"ast":null,"code":"var _jsxFileName = \"/Users/duaashahid/Desktop/gateguru/client/src/components/Dplot.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { useEffect, useState } from 'react'\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile=(file)=>{\n//     const storage= getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//        setVideoPerc(Math.round(progress));\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         switch (error.code) {\n//           case \"storage/unauthorized\":\n//             // User doesn't have permission to access the object\n//             console.log(error);\n//             break;\n//           case \"storage/canceled\":\n//             // User canceled the upload\n//             break;\n//           case \"storage/unknown\":\n//             // Unknown error occurred, inspect error.serverResponse\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       () => {\n//         // Upload completed successfully, now we can get the download URL\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//                downloadURL,\n//             };\n//           });\n\n//         });\n//       }\n//     );\n\n//   }\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   try {\n//   //     await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//   //     window.location.reload();\n//   //   } catch (error) {\n//   //     console.log(error);\n//   //   }\n//   // };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//         await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//         window.location.reload();\n//     } catch (error) {\n//         console.log(\"Error:\", error);\n//         if (error.response) {\n//             // Request was made and server responded with a status code\n//             console.log(\"Status code:\", error.response.status);\n//             console.log(\"Response data:\", error.response.data);\n//         } else if (error.request) {\n//             // Request was made but no response was received\n//             console.log(\"No response received:\", error.request);\n//         } else {\n//             // Something else went wrong\n//             console.log(\"Error:\", error.message);\n//         }\n//     }\n// };\n\n//   // http://localhost:5000/api/videos\n\n//   const divStyle = {\n//     position: \"relative\", // Make the div relative\n//     // Add other CSS styles as needed\n//   };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\" style={divStyle}>\n//         <video\n//           autoPlay\n//           loop\n//           muted\n//           id=\"video\"\n//           className=\"w-full h-[700px] \"\n//         >\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//       {/* <div className=\" w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//       <h1 className=\"text-5xl text-white font-semibold pt-20 md:mx-90\"style={{fontFamily: 'Roboto ',textAlign:\"center\"}}> Upload your video !</h1>\n\n//        <button className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//       </div> */}\n\n//       <div className=\"upload bg-black text-white mt-20 w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\" >\n\n//         <form onSubmit={handleSubmit}> \n//         <label htmlFor=\"video\">Video:</label> {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//         <br/>\n//         <input\n//         type=\"file\"\n//         accept=\"video/*\"\n//         id=\"video\"       \n//         onChange={(e) => setVideo((prev) => e.target.files[0])}\n//          />\n//         <br/>\n//         <button  type=\"submit\" className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//         </form>\n//       </div>\n\n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   // const [processedVideoData, setProcessedVideoData] = useState(null);\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder =  \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage,folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//       // window.location.reload();\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleFetchProcessedVideo = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/output-video`, { responseType: 'arraybuffer' });\n//   //     console.log(\"Response:\", response);\n\n//   //     // Create a Blob from the array buffer\n//   //     const blob = new Blob([response.data], { type: 'video/mp4' });\n\n//   //     // Generate a URL for the blob\n//   //     const url = URL.createObjectURL(blob);\n\n//   //     // Set the URL as the source for the video element\n//   //     setProcessedVideoData(url);\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching processed video:\", error);\n//   //   }\n//   // };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br />\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '250px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n\n//           <br />\n\n//           <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n\n//           <br/>\n\n//           {/* <button\n//             onClick={handleFetchProcessedVideo}\n//             className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n//             style={{ width: '200px' }}\n//           >\n//             Fetch Processed Video\n//           </button>\n//           <br />\n//           {processedVideoData && (\n//             <video autoPlay controls className=\"w-[800px] h-[800px]\">\n//               <source src={processedVideoData} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           )} */}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { getDownloadURL, uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\nimport app from '../firebase';\nimport Navbar from \"./Navbar\";\nimport videoF from \"../../src/pictures-olive/vi.mp4\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dplot() {\n  _s();\n  const [video, setVideo] = useState(undefined);\n  const [videoPerc, setVideoPerc] = useState(0);\n  const [inputs, setInputs] = useState({});\n  const [streamedBytes, setStreamedBytes] = useState(0);\n  const [totalBytes, setTotalBytes] = useState(0);\n  useEffect(() => {\n    video && uploadFile(video);\n  }, [video]);\n  const uploadFile = file => {\n    const storage = getStorage(app);\n    const folder = \"input_videos/\";\n    const fileName = new Date().getTime() + file.name;\n    const storageRef = ref(storage, folder + fileName);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n    uploadTask.on(\"state_changed\", snapshot => {\n      const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      setVideoPerc(Math.round(progress));\n      console.log(`Upload progress: ${Math.round(progress)}%`);\n      setStreamedBytes(snapshot.bytesTransferred);\n      setTotalBytes(snapshot.totalBytes);\n      switch (snapshot.state) {\n        case \"paused\":\n          console.log(\"Upload is paused\");\n          break;\n        case \"running\":\n          console.log(\"Upload is running\");\n          break;\n        default:\n          break;\n      }\n    }, error => {\n      console.log(\"Upload error:\", error);\n    }, () => {\n      getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n        console.log('DownloadURL - ', downloadURL);\n        setInputs(prev => {\n          return {\n            ...prev,\n            downloadURL\n          };\n        });\n      });\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await axios.post(`http://127.0.0.1:5000/api/videos`, {\n        ...inputs\n      });\n      console.log('Video uploaded successfully');\n    } catch (error) {\n      console.log(\"Error uploading video:\", error);\n    }\n  };\n  const fs = require('fs');\n  const path = require('path');\n  const handleDownload = async () => {\n    try {\n      const response = await axios.get(`http://127.0.0.1:5000/api/download-video`, {\n        responseType: 'stream'\n      });\n      const {\n        videoURL,\n        jsonURLs\n      } = response.data;\n      const outputPath = path.join(__dirname, 'client-output', 'downloaded-video.mp4');\n\n      // Log processed video URL\n      console.log('Processed Video URL:', videoURL);\n\n      // Create directory if it doesn't exist\n      fs.mkdirSync(path.dirname(outputPath), {\n        recursive: true\n      });\n\n      // Pipe the response stream to a file\n      response.data.pipe(fs.createWriteStream(outputPath));\n      response.data.on('end', () => {\n        console.log('Video downloaded successfully to:', outputPath);\n      });\n    } catch (error) {\n      console.log(\"Error fetching video URLs:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-black h-full\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full h-[950px] \",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        loop: true,\n        muted: true,\n        id: \"video\",\n        className: \"w-full h-[700px] mt-40\",\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: videoF,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"video\",\n            children: \"Video:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this), videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"video/*\",\n            id: \"video\",\n            onChange: e => setVideo(e.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\",\n            style: {\n              width: '250px'\n            },\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDownload,\n          className: \"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\",\n          style: {\n            width: '350px'\n          },\n          children: \"Download Processed Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 435,\n    columnNumber: 5\n  }, this);\n}\n_s(Dplot, \"hKKmlri+NLq6omL5HPVrVNbDeZU=\");\n_c = Dplot;\nexport default Dplot;\nvar _c;\n$RefreshReg$(_c, \"Dplot\");","map":{"version":3,"names":["React","useState","useEffect","axios","getDownloadURL","uploadBytesResumable","ref","getStorage","app","Navbar","videoF","jsxDEV","_jsxDEV","Dplot","_s","video","setVideo","undefined","videoPerc","setVideoPerc","inputs","setInputs","streamedBytes","setStreamedBytes","totalBytes","setTotalBytes","uploadFile","file","storage","folder","fileName","Date","getTime","name","storageRef","uploadTask","on","snapshot","progress","bytesTransferred","Math","round","console","log","state","error","then","downloadURL","prev","handleSubmit","e","preventDefault","post","fs","require","path","handleDownload","response","get","responseType","videoURL","jsonURLs","data","outputPath","join","__dirname","mkdirSync","dirname","recursive","pipe","createWriteStream","className","children","_jsxFileName","lineNumber","columnNumber","autoPlay","loop","muted","id","src","type","onSubmit","htmlFor","accept","onChange","target","files","style","width","onClick","_c","$RefreshReg$"],"sources":["/Users/duaashahid/Desktop/gateguru/client/src/components/Dplot.jsx"],"sourcesContent":["// import React from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { useEffect, useState } from 'react'\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n\n\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n\n\n\n// function Dplot() {\n\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile=(file)=>{\n//     const storage= getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//        setVideoPerc(Math.round(progress));\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         switch (error.code) {\n//           case \"storage/unauthorized\":\n//             // User doesn't have permission to access the object\n//             console.log(error);\n//             break;\n//           case \"storage/canceled\":\n//             // User canceled the upload\n//             break;\n//           case \"storage/unknown\":\n//             // Unknown error occurred, inspect error.serverResponse\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       () => {\n//         // Upload completed successfully, now we can get the download URL\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//                downloadURL,\n//             };\n//           });\n\n//         });\n//       }\n//     );\n\n//   }\n\n\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   try {\n//   //     await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//   //     window.location.reload();\n//   //   } catch (error) {\n//   //     console.log(error);\n//   //   }\n//   // };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//         await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//         window.location.reload();\n//     } catch (error) {\n//         console.log(\"Error:\", error);\n//         if (error.response) {\n//             // Request was made and server responded with a status code\n//             console.log(\"Status code:\", error.response.status);\n//             console.log(\"Response data:\", error.response.data);\n//         } else if (error.request) {\n//             // Request was made but no response was received\n//             console.log(\"No response received:\", error.request);\n//         } else {\n//             // Something else went wrong\n//             console.log(\"Error:\", error.message);\n//         }\n//     }\n// };\n\n//   // http://localhost:5000/api/videos\n\n//   const divStyle = {\n//     position: \"relative\", // Make the div relative\n//     // Add other CSS styles as needed\n//   };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\" style={divStyle}>\n//         <video\n//           autoPlay\n//           loop\n//           muted\n//           id=\"video\"\n//           className=\"w-full h-[700px] \"\n//         >\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n          \n//       {/* <div className=\" w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//       <h1 className=\"text-5xl text-white font-semibold pt-20 md:mx-90\"style={{fontFamily: 'Roboto ',textAlign:\"center\"}}> Upload your video !</h1>\n      \n//        <button className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n  \n//       </div> */}\n\n//       <div className=\"upload bg-black text-white mt-20 w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\" >\n        \n//         <form onSubmit={handleSubmit}> \n//         <label htmlFor=\"video\">Video:</label> {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//         <br/>\n//         <input\n//         type=\"file\"\n//         accept=\"video/*\"\n//         id=\"video\"       \n//         onChange={(e) => setVideo((prev) => e.target.files[0])}\n//          />\n//         <br/>\n//         <button  type=\"submit\" className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//         </form>\n//       </div>\n\n      \n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   // const [processedVideoData, setProcessedVideoData] = useState(null);\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder =  \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage,folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//       // window.location.reload();\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleFetchProcessedVideo = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/output-video`, { responseType: 'arraybuffer' });\n//   //     console.log(\"Response:\", response);\n  \n//   //     // Create a Blob from the array buffer\n//   //     const blob = new Blob([response.data], { type: 'video/mp4' });\n  \n//   //     // Generate a URL for the blob\n//   //     const url = URL.createObjectURL(blob);\n  \n//   //     // Set the URL as the source for the video element\n//   //     setProcessedVideoData(url);\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching processed video:\", error);\n//   //   }\n//   // };\n  \n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br />\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '250px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n          \n//           <br />\n\n//           <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n\n//           <br/>\n\n//           {/* <button\n//             onClick={handleFetchProcessedVideo}\n//             className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n//             style={{ width: '200px' }}\n//           >\n//             Fetch Processed Video\n//           </button>\n//           <br />\n//           {processedVideoData && (\n//             <video autoPlay controls className=\"w-[800px] h-[800px]\">\n//               <source src={processedVideoData} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           )} */}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { getDownloadURL,uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\nimport app from '../firebase';\n\nimport Navbar from \"./Navbar\";\nimport videoF from \"../../src/pictures-olive/vi.mp4\";\n\nfunction Dplot() {\n  const [video, setVideo] = useState(undefined);\n  const [videoPerc, setVideoPerc] = useState(0);\n  const [inputs, setInputs] = useState({});\n  const [streamedBytes, setStreamedBytes] = useState(0);\n  const [totalBytes, setTotalBytes] = useState(0);\n\n  useEffect(() => {\n    video && uploadFile(video);\n  }, [video]);\n\n  const uploadFile = (file) => {\n    const storage = getStorage(app);\n    const folder = \"input_videos/\";\n    const fileName = new Date().getTime() + file.name;\n    const storageRef = ref(storage, folder + fileName);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n\n    uploadTask.on(\n      \"state_changed\",\n      (snapshot) => {\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        setVideoPerc(Math.round(progress));\n        console.log(`Upload progress: ${Math.round(progress)}%`);\n        setStreamedBytes(snapshot.bytesTransferred);\n        setTotalBytes(snapshot.totalBytes);\n        switch (snapshot.state) {\n          case \"paused\":\n            console.log(\"Upload is paused\");\n            break;\n          case \"running\":\n            console.log(\"Upload is running\");\n            break;\n          default:\n            break;\n        }\n      },\n      (error) => {\n        console.log(\"Upload error:\", error);\n      },\n      () => {\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('DownloadURL - ', downloadURL);\n          setInputs((prev) => {\n            return {\n              ...prev,\n              downloadURL,\n            };\n          });\n        });\n      }\n    );\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n      console.log('Video uploaded successfully');\n    } catch (error) {\n      console.log(\"Error uploading video:\", error);\n    }\n  };\n\n  \n\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst handleDownload = async () => {\n    try {\n        const response = await axios.get(`http://127.0.0.1:5000/api/download-video`, {\n            responseType: 'stream'\n        });\n        const { videoURL, jsonURLs } = response.data;\n        const outputPath = path.join(__dirname, 'client-output', 'downloaded-video.mp4');\n\n        // Log processed video URL\n        console.log('Processed Video URL:', videoURL);\n\n        // Create directory if it doesn't exist\n        fs.mkdirSync(path.dirname(outputPath), { recursive: true });\n\n        // Pipe the response stream to a file\n        response.data.pipe(fs.createWriteStream(outputPath));\n\n        response.data.on('end', () => {\n            console.log('Video downloaded successfully to:', outputPath);\n        });\n\n    } catch (error) {\n        console.log(\"Error fetching video URLs:\", error);\n    }\n};\n  \n  \n  return (\n    <div className=\"bg-black h-full\">\n      <Navbar />\n      <div className=\"relative w-full h-[950px] \">\n        <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n          <source src={videoF} type=\"video/mp4\" />\n        </video>\n\n        <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n          <form onSubmit={handleSubmit}>\n            <label htmlFor=\"video\">Video:</label>\n            {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n            <br />\n            <input\n              type=\"file\"\n              accept=\"video/*\"\n              id=\"video\"\n              onChange={(e) => setVideo(e.target.files[0])}\n            />\n            <br />\n\n            <button\n              type=\"submit\"\n              className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n              style={{ width: '250px' }}\n            >\n              Upload\n            </button>\n          </form>\n          \n          <br />\n\n          <button\n              onClick={handleDownload}\n              className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n              style={{ width: '350px' }}\n            >\n              Download Processed Video\n            </button>\n\n          <br/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dplot;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAKA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}