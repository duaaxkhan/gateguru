{"ast":null,"code":"// import React from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { useEffect, useState } from 'react'\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile=(file)=>{\n//     const storage= getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//        setVideoPerc(Math.round(progress));\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         switch (error.code) {\n//           case \"storage/unauthorized\":\n//             // User doesn't have permission to access the object\n//             console.log(error);\n//             break;\n//           case \"storage/canceled\":\n//             // User canceled the upload\n//             break;\n//           case \"storage/unknown\":\n//             // Unknown error occurred, inspect error.serverResponse\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       () => {\n//         // Upload completed successfully, now we can get the download URL\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//                downloadURL,\n//             };\n//           });\n\n//         });\n//       }\n//     );\n\n//   }\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   try {\n//   //     await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//   //     window.location.reload();\n//   //   } catch (error) {\n//   //     console.log(error);\n//   //   }\n//   // };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//         await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//         window.location.reload();\n//     } catch (error) {\n//         console.log(\"Error:\", error);\n//         if (error.response) {\n//             // Request was made and server responded with a status code\n//             console.log(\"Status code:\", error.response.status);\n//             console.log(\"Response data:\", error.response.data);\n//         } else if (error.request) {\n//             // Request was made but no response was received\n//             console.log(\"No response received:\", error.request);\n//         } else {\n//             // Something else went wrong\n//             console.log(\"Error:\", error.message);\n//         }\n//     }\n// };\n\n//   // http://localhost:5000/api/videos\n\n//   const divStyle = {\n//     position: \"relative\", // Make the div relative\n//     // Add other CSS styles as needed\n//   };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\" style={divStyle}>\n//         <video\n//           autoPlay\n//           loop\n//           muted\n//           id=\"video\"\n//           className=\"w-full h-[700px] \"\n//         >\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//       {/* <div className=\" w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//       <h1 className=\"text-5xl text-white font-semibold pt-20 md:mx-90\"style={{fontFamily: 'Roboto ',textAlign:\"center\"}}> Upload your video !</h1>\n\n//        <button className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//       </div> */}\n\n//       <div className=\"upload bg-black text-white mt-20 w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\" >\n\n//         <form onSubmit={handleSubmit}> \n//         <label htmlFor=\"video\">Video:</label> {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//         <br/>\n//         <input\n//         type=\"file\"\n//         accept=\"video/*\"\n//         id=\"video\"       \n//         onChange={(e) => setVideo((prev) => e.target.files[0])}\n//          />\n//         <br/>\n//         <button  type=\"submit\" className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//         </form>\n//       </div>\n\n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   // const [processedVideoData, setProcessedVideoData] = useState(null);\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder =  \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage,folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//       // window.location.reload();\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleFetchProcessedVideo = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/output-video`, { responseType: 'arraybuffer' });\n//   //     console.log(\"Response:\", response);\n\n//   //     // Create a Blob from the array buffer\n//   //     const blob = new Blob([response.data], { type: 'video/mp4' });\n\n//   //     // Generate a URL for the blob\n//   //     const url = URL.createObjectURL(blob);\n\n//   //     // Set the URL as the source for the video element\n//   //     setProcessedVideoData(url);\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching processed video:\", error);\n//   //   }\n//   // };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br />\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '250px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n\n//           <br />\n\n//           <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n\n//           <br/>\n\n//           {/* <button\n//             onClick={handleFetchProcessedVideo}\n//             className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n//             style={{ width: '200px' }}\n//           >\n//             Fetch Processed Video\n//           </button>\n//           <br />\n//           {processedVideoData && (\n//             <video autoPlay controls className=\"w-[800px] h-[800px]\">\n//               <source src={processedVideoData} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           )} */}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n/////////prettty pleasinnnnnn\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { getDownloadURL,uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\n// import app from '../firebase';\n// import Navbar from \"./Navbar\";\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder = \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleDownload = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/download-video`);\n//   //     const { videoURL,jsonURLs} = response.data;\n\n//   //     // Log processed video URL\n//   //     console.log('Processed Video URL:', videoURL);\n\n//   //     // // Log JSON file URLs\n//   //     // console.log('JSON File URLs:');\n//   //     // jsonURLs.forEach((url, index) => {\n//   //     //   console.log(`JSON File ${index + 1}:`, url);\n//   //     // });\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching video URLs:\", error);\n//   //   }\n//   // };\n\n//   //try 1 the issue was video was not playing\n\n// //   const handleDownload = async () => {\n// //     try {\n// //         const response = await axios.get(`http://127.0.0.1:5000/api/download-video`, {\n// //             responseType: 'blob' // Specify responseType as 'blob'\n// //         });\n// //         const { videoURL } = response.data;\n\n// //         // Log processed video URL\n// //         console.log('Processed Video URL:', videoURL);\n\n// //         // Create a temporary URL for the blob\n// //         const url = window.URL.createObjectURL(new Blob([response.data]));\n\n// //         // Create a link element\n// //         const link = document.createElement('a');\n// //         link.href = url;\n// //         link.setAttribute('download', 'downloaded-video.mp4');\n\n// //         // Append the link to the body\n// //         document.body.appendChild(link);\n\n// //         // Programmatically click the link to trigger the download\n// //         link.click();\n\n// //         // Cleanup: remove the link and revoke the blob URL\n// //         link.parentNode.removeChild(link);\n// //         window.URL.revokeObjectURL(url);\n\n// //     } catch (error) {\n// //         console.log(\"Error fetching video URLs:\", error);\n// //     }\n// // };\n\n// //try 2\n// const handleDownload = async () => {\n//   try {\n//       // Send a GET request to the server to fetch the video file\n//       const response = await fetch('http://127.0.0.1:5000/api/download-video');\n\n//       // Check if the response is successful (status code 200)\n//       if (!response.ok) {\n//           throw new Error('Failed to fetch video');\n//       }\n\n//       // Extract the filename from the response headers or set a default name\n//       const filename = response.headers.get('content-disposition')?.split('filename=')[1] || 'downloaded-video.mp4';\n\n//       // Convert the response to a blob\n//       const blob = await response.blob();\n\n//       // Create a temporary URL for the blob\n//       const url = window.URL.createObjectURL(blob);\n\n//       // Create a link element to trigger the download\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n\n//       // Append the link to the document body and programmatically click it\n//       document.body.appendChild(link);\n//       link.click();\n\n//       // Clean up by removing the link and revoking the object URL\n//       link.parentNode.removeChild(link);\n//       window.URL.revokeObjectURL(url);\n//   } catch (error) {\n//       console.error('Error downloading video:', error);\n//   }\n// };\n\n// const handlePlay = () => {\n//  // Replace 'path/to/your/video.mp4' with the actual path to your video file\n//   const videoPath = '/Users/duaashahid/Desktop/gateguru/flask_backend/output/output_video.mp4';\n\n//   // Create a new video element\n//   const video = document.createElement('video');\n//   video.src = videoPath;\n//   video.controls = true; // Show controls like play, pause, etc.\n\n//   // Append the video element to the document body\n//   document.body.appendChild(video);\n\n//   // Play the video\n//   video.play();\n\n//   // <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//   //         <source src={videoFo} type=\"video/mp4\" />\n//   //       </video>\n// };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <h1 className=\"mt-10 mb-6 text-center text-white text-3xl\">Getting 3D Plots</h1>\n//         <p className=\"text-center text-white mb-6 text-lg mt-10\">\n//           Upload your walking video to get get 3D joint point pin pointed on your body, You can download the video by clicking on the Download Processed Video\n//         </p>\n\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n\n//             <br/>\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF] ml-2  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n\n//           <br />\n\n//           <button\n//               onClick={handleDownload}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n//             <br/>\n//             <button\n//              onClick={handlePlay}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Play\n//             </button>\n\n//           <br/>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;","map":{"version":3,"names":[],"sources":["/Users/duaashahid/Desktop/gateguru/client/src/components/Dplot.jsx"],"sourcesContent":["// import React from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { useEffect, useState } from 'react'\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n\n\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n\n\n\n// function Dplot() {\n\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile=(file)=>{\n//     const storage= getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//        setVideoPerc(Math.round(progress));\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         switch (error.code) {\n//           case \"storage/unauthorized\":\n//             // User doesn't have permission to access the object\n//             console.log(error);\n//             break;\n//           case \"storage/canceled\":\n//             // User canceled the upload\n//             break;\n//           case \"storage/unknown\":\n//             // Unknown error occurred, inspect error.serverResponse\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       () => {\n//         // Upload completed successfully, now we can get the download URL\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//                downloadURL,\n//             };\n//           });\n\n//         });\n//       }\n//     );\n\n//   }\n\n\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   try {\n//   //     await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//   //     window.location.reload();\n//   //   } catch (error) {\n//   //     console.log(error);\n//   //   }\n//   // };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//         await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//         window.location.reload();\n//     } catch (error) {\n//         console.log(\"Error:\", error);\n//         if (error.response) {\n//             // Request was made and server responded with a status code\n//             console.log(\"Status code:\", error.response.status);\n//             console.log(\"Response data:\", error.response.data);\n//         } else if (error.request) {\n//             // Request was made but no response was received\n//             console.log(\"No response received:\", error.request);\n//         } else {\n//             // Something else went wrong\n//             console.log(\"Error:\", error.message);\n//         }\n//     }\n// };\n\n//   // http://localhost:5000/api/videos\n\n//   const divStyle = {\n//     position: \"relative\", // Make the div relative\n//     // Add other CSS styles as needed\n//   };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\" style={divStyle}>\n//         <video\n//           autoPlay\n//           loop\n//           muted\n//           id=\"video\"\n//           className=\"w-full h-[700px] \"\n//         >\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n          \n//       {/* <div className=\" w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//       <h1 className=\"text-5xl text-white font-semibold pt-20 md:mx-90\"style={{fontFamily: 'Roboto ',textAlign:\"center\"}}> Upload your video !</h1>\n      \n//        <button className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n  \n//       </div> */}\n\n//       <div className=\"upload bg-black text-white mt-20 w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\" >\n        \n//         <form onSubmit={handleSubmit}> \n//         <label htmlFor=\"video\">Video:</label> {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//         <br/>\n//         <input\n//         type=\"file\"\n//         accept=\"video/*\"\n//         id=\"video\"       \n//         onChange={(e) => setVideo((prev) => e.target.files[0])}\n//          />\n//         <br/>\n//         <button  type=\"submit\" className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//         </form>\n//       </div>\n\n      \n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   // const [processedVideoData, setProcessedVideoData] = useState(null);\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder =  \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage,folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//       // window.location.reload();\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleFetchProcessedVideo = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/output-video`, { responseType: 'arraybuffer' });\n//   //     console.log(\"Response:\", response);\n  \n//   //     // Create a Blob from the array buffer\n//   //     const blob = new Blob([response.data], { type: 'video/mp4' });\n  \n//   //     // Generate a URL for the blob\n//   //     const url = URL.createObjectURL(blob);\n  \n//   //     // Set the URL as the source for the video element\n//   //     setProcessedVideoData(url);\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching processed video:\", error);\n//   //   }\n//   // };\n  \n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br />\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '250px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n          \n//           <br />\n\n//           <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n\n//           <br/>\n\n//           {/* <button\n//             onClick={handleFetchProcessedVideo}\n//             className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n//             style={{ width: '200px' }}\n//           >\n//             Fetch Processed Video\n//           </button>\n//           <br />\n//           {processedVideoData && (\n//             <video autoPlay controls className=\"w-[800px] h-[800px]\">\n//               <source src={processedVideoData} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           )} */}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n\n\n\n\n\n\n\n\n\n\n/////////prettty pleasinnnnnn\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { getDownloadURL,uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\n// import app from '../firebase';\n// import Navbar from \"./Navbar\";\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder = \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleDownload = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/download-video`);\n//   //     const { videoURL,jsonURLs} = response.data;\n      \n//   //     // Log processed video URL\n//   //     console.log('Processed Video URL:', videoURL);\n  \n//   //     // // Log JSON file URLs\n//   //     // console.log('JSON File URLs:');\n//   //     // jsonURLs.forEach((url, index) => {\n//   //     //   console.log(`JSON File ${index + 1}:`, url);\n//   //     // });\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching video URLs:\", error);\n//   //   }\n//   // };\n\n\n//   //try 1 the issue was video was not playing\n\n// //   const handleDownload = async () => {\n// //     try {\n// //         const response = await axios.get(`http://127.0.0.1:5000/api/download-video`, {\n// //             responseType: 'blob' // Specify responseType as 'blob'\n// //         });\n// //         const { videoURL } = response.data;\n        \n// //         // Log processed video URL\n// //         console.log('Processed Video URL:', videoURL);\n\n// //         // Create a temporary URL for the blob\n// //         const url = window.URL.createObjectURL(new Blob([response.data]));\n\n// //         // Create a link element\n// //         const link = document.createElement('a');\n// //         link.href = url;\n// //         link.setAttribute('download', 'downloaded-video.mp4');\n\n// //         // Append the link to the body\n// //         document.body.appendChild(link);\n\n// //         // Programmatically click the link to trigger the download\n// //         link.click();\n\n// //         // Cleanup: remove the link and revoke the blob URL\n// //         link.parentNode.removeChild(link);\n// //         window.URL.revokeObjectURL(url);\n\n// //     } catch (error) {\n// //         console.log(\"Error fetching video URLs:\", error);\n// //     }\n// // };\n\n\n// //try 2\n// const handleDownload = async () => {\n//   try {\n//       // Send a GET request to the server to fetch the video file\n//       const response = await fetch('http://127.0.0.1:5000/api/download-video');\n      \n//       // Check if the response is successful (status code 200)\n//       if (!response.ok) {\n//           throw new Error('Failed to fetch video');\n//       }\n\n//       // Extract the filename from the response headers or set a default name\n//       const filename = response.headers.get('content-disposition')?.split('filename=')[1] || 'downloaded-video.mp4';\n\n//       // Convert the response to a blob\n//       const blob = await response.blob();\n\n//       // Create a temporary URL for the blob\n//       const url = window.URL.createObjectURL(blob);\n\n//       // Create a link element to trigger the download\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n\n//       // Append the link to the document body and programmatically click it\n//       document.body.appendChild(link);\n//       link.click();\n\n//       // Clean up by removing the link and revoking the object URL\n//       link.parentNode.removeChild(link);\n//       window.URL.revokeObjectURL(url);\n//   } catch (error) {\n//       console.error('Error downloading video:', error);\n//   }\n// };\n\n// const handlePlay = () => {\n//  // Replace 'path/to/your/video.mp4' with the actual path to your video file\n//   const videoPath = '/Users/duaashahid/Desktop/gateguru/flask_backend/output/output_video.mp4';\n\n//   // Create a new video element\n//   const video = document.createElement('video');\n//   video.src = videoPath;\n//   video.controls = true; // Show controls like play, pause, etc.\n\n//   // Append the video element to the document body\n//   document.body.appendChild(video);\n\n//   // Play the video\n//   video.play();\n\n\n//   // <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//   //         <source src={videoFo} type=\"video/mp4\" />\n//   //       </video>\n// };\n\n  \n  \n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <h1 className=\"mt-10 mb-6 text-center text-white text-3xl\">Getting 3D Plots</h1>\n//         <p className=\"text-center text-white mb-6 text-lg mt-10\">\n//           Upload your walking video to get get 3D joint point pin pointed on your body, You can download the video by clicking on the Download Processed Video\n//         </p>\n\n      \n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n            \n//             <br/>\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF] ml-2  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n          \n//           <br />\n\n//           <button\n//               onClick={handleDownload}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n//             <br/>\n//             <button\n//              onClick={handlePlay}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Play\n//             </button>\n\n//           <br/>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;AAKA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;;AAEA;AACA;AACA;;AAEA;;AAKA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAYA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}