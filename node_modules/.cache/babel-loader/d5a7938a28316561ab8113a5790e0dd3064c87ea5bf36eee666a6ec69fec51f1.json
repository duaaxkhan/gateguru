{"ast":null,"code":"import _regeneratorRuntime from\"/Users/duaashahid/Desktop/gateguru/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/duaashahid/Desktop/gateguru/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _objectSpread from\"/Users/duaashahid/Desktop/gateguru/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/duaashahid/Desktop/gateguru/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// import React from \"react\";\n// import axios from \"axios\";\n// import Navbar from \"./Navbar\";\n// import { useEffect, useState } from 'react'\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n//   const uploadFile=(file)=>{\n//     const storage= getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//        setVideoPerc(Math.round(progress));\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         switch (error.code) {\n//           case \"storage/unauthorized\":\n//             // User doesn't have permission to access the object\n//             console.log(error);\n//             break;\n//           case \"storage/canceled\":\n//             // User canceled the upload\n//             break;\n//           case \"storage/unknown\":\n//             // Unknown error occurred, inspect error.serverResponse\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       () => {\n//         // Upload completed successfully, now we can get the download URL\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//                downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   }\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   try {\n//   //     await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//   //     window.location.reload();\n//   //   } catch (error) {\n//   //     console.log(error);\n//   //   }\n//   // };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//         await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//         window.location.reload();\n//     } catch (error) {\n//         console.log(\"Error:\", error);\n//         if (error.response) {\n//             // Request was made and server responded with a status code\n//             console.log(\"Status code:\", error.response.status);\n//             console.log(\"Response data:\", error.response.data);\n//         } else if (error.request) {\n//             // Request was made but no response was received\n//             console.log(\"No response received:\", error.request);\n//         } else {\n//             // Something else went wrong\n//             console.log(\"Error:\", error.message);\n//         }\n//     }\n// };\n//   // http://localhost:5000/api/videos\n//   const divStyle = {\n//     position: \"relative\", // Make the div relative\n//     // Add other CSS styles as needed\n//   };\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\" style={divStyle}>\n//         <video\n//           autoPlay\n//           loop\n//           muted\n//           id=\"video\"\n//           className=\"w-full h-[700px] \"\n//         >\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n//       {/* <div className=\" w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//       <h1 className=\"text-5xl text-white font-semibold pt-20 md:mx-90\"style={{fontFamily: 'Roboto ',textAlign:\"center\"}}> Upload your video !</h1>\n//        <button className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n//       </div> */}\n//       <div className=\"upload bg-black text-white mt-20 w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\" >\n//         <form onSubmit={handleSubmit}> \n//         <label htmlFor=\"video\">Video:</label> {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//         <br/>\n//         <input\n//         type=\"file\"\n//         accept=\"video/*\"\n//         id=\"video\"       \n//         onChange={(e) => setVideo((prev) => e.target.files[0])}\n//          />\n//         <br/>\n//         <button  type=\"submit\" className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n//         </form>\n//       </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default Dplot;\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import Navbar from \"./Navbar\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   // const [processedVideoData, setProcessedVideoData] = useState(null);\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder =  \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage,folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//       // window.location.reload();\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n//   // const handleFetchProcessedVideo = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/output-video`, { responseType: 'arraybuffer' });\n//   //     console.log(\"Response:\", response);\n//   //     // Create a Blob from the array buffer\n//   //     const blob = new Blob([response.data], { type: 'video/mp4' });\n//   //     // Generate a URL for the blob\n//   //     const url = URL.createObjectURL(blob);\n//   //     // Set the URL as the source for the video element\n//   //     setProcessedVideoData(url);\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching processed video:\", error);\n//   //   }\n//   // };\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br />\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '250px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n//           <br />\n//           <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n//           <br/>\n//           {/* <button\n//             onClick={handleFetchProcessedVideo}\n//             className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n//             style={{ width: '200px' }}\n//           >\n//             Fetch Processed Video\n//           </button>\n//           <br />\n//           {processedVideoData && (\n//             <video autoPlay controls className=\"w-[800px] h-[800px]\">\n//               <source src={processedVideoData} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           )} */}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default Dplot;\n/////////prettty pleasinnnnnn\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { getDownloadURL,uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\n// import app from '../firebase';\n// import Navbar from \"./Navbar\";\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder = \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n//   // const handleDownload = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/download-video`);\n//   //     const { videoURL,jsonURLs} = response.data;\n//   //     // Log processed video URL\n//   //     console.log('Processed Video URL:', videoURL);\n//   //     // // Log JSON file URLs\n//   //     // console.log('JSON File URLs:');\n//   //     // jsonURLs.forEach((url, index) => {\n//   //     //   console.log(`JSON File ${index + 1}:`, url);\n//   //     // });\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching video URLs:\", error);\n//   //   }\n//   // };\n//   //try 1 the issue was video was not playing\n// //   const handleDownload = async () => {\n// //     try {\n// //         const response = await axios.get(`http://127.0.0.1:5000/api/download-video`, {\n// //             responseType: 'blob' // Specify responseType as 'blob'\n// //         });\n// //         const { videoURL } = response.data;\n// //         // Log processed video URL\n// //         console.log('Processed Video URL:', videoURL);\n// //         // Create a temporary URL for the blob\n// //         const url = window.URL.createObjectURL(new Blob([response.data]));\n// //         // Create a link element\n// //         const link = document.createElement('a');\n// //         link.href = url;\n// //         link.setAttribute('download', 'downloaded-video.mp4');\n// //         // Append the link to the body\n// //         document.body.appendChild(link);\n// //         // Programmatically click the link to trigger the download\n// //         link.click();\n// //         // Cleanup: remove the link and revoke the blob URL\n// //         link.parentNode.removeChild(link);\n// //         window.URL.revokeObjectURL(url);\n// //     } catch (error) {\n// //         console.log(\"Error fetching video URLs:\", error);\n// //     }\n// // };\n// //try 2\n// const handleDownload = async () => {\n//   try {\n//       // Send a GET request to the server to fetch the video file\n//       const response = await fetch('http://127.0.0.1:5000/api/download-video');\n//       // Check if the response is successful (status code 200)\n//       if (!response.ok) {\n//           throw new Error('Failed to fetch video');\n//       }\n//       // Extract the filename from the response headers or set a default name\n//       const filename = response.headers.get('content-disposition')?.split('filename=')[1] || 'downloaded-video.mp4';\n//       // Convert the response to a blob\n//       const blob = await response.blob();\n//       // Create a temporary URL for the blob\n//       const url = window.URL.createObjectURL(blob);\n//       // Create a link element to trigger the download\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n//       // Append the link to the document body and programmatically click it\n//       document.body.appendChild(link);\n//       link.click();\n//       // Clean up by removing the link and revoking the object URL\n//       link.parentNode.removeChild(link);\n//       window.URL.revokeObjectURL(url);\n//   } catch (error) {\n//       console.error('Error downloading video:', error);\n//   }\n// };\n// const handlePlay = () => {\n//  // Replace 'path/to/your/video.mp4' with the actual path to your video file\n//   const videoPath = '/Users/duaashahid/Desktop/gateguru/flask_backend/output/output_video.mp4';\n//   // Create a new video element\n//   const video = document.createElement('video');\n//   video.src = videoPath;\n//   video.controls = true; // Show controls like play, pause, etc.\n//   // Append the video element to the document body\n//   document.body.appendChild(video);\n//   // Play the video\n//   video.play();\n//   // <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//   //         <source src={videoFo} type=\"video/mp4\" />\n//   //       </video>\n// };\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <h1 className=\"mt-10 mb-6 text-center text-white text-3xl\">Getting 3D Plots</h1>\n//         <p className=\"text-center text-white mb-6 text-lg mt-10\">\n//           Upload your walking video to get get 3D joint point pin pointed on your body, You can download the video by clicking on the Download Processed Video\n//         </p>\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br/>\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF] ml-2  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n//           <br />\n//           <button\n//               onClick={handleDownload}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n//             <br/>\n//             <button\n//              onClick={handlePlay}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Play\n//             </button>\n//           <br/>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n// export default Dplot;\nimport React,{useState,useEffect,useRef}from\"react\";import axios from\"axios\";import{getDownloadURL,uploadBytesResumable,ref,getStorage}from\"firebase/storage\";import app from'../firebase';import Navbar from\"./Navbar\";import videoF from\"../../src/pictures-olive/vi.mp4\";import Newsletter from\"./Newsletter.jsx\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Dplot(){var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),video=_useState2[0],setVideo=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),videoPerc=_useState4[0],setVideoPerc=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),inputs=_useState6[0],setInputs=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),streamedBytes=_useState8[0],setStreamedBytes=_useState8[1];var _useState9=useState(0),_useState10=_slicedToArray(_useState9,2),totalBytes=_useState10[0],setTotalBytes=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),downloadedVideoURL=_useState12[0],setDownloadedVideoURL=_useState12[1];var videoRef=useRef(null);useEffect(function(){video&&uploadFile(video);},[video]);var uploadFile=function uploadFile(file){var storage=getStorage(app);var folder=\"input_videos/\";var fileName=new Date().getTime()+file.name;var storageRef=ref(storage,folder+fileName);var uploadTask=uploadBytesResumable(storageRef,file);uploadTask.on(\"state_changed\",function(snapshot){var progress=snapshot.bytesTransferred/snapshot.totalBytes*100;setVideoPerc(Math.round(progress));console.log(\"Upload progress: \".concat(Math.round(progress),\"%\"));setStreamedBytes(snapshot.bytesTransferred);setTotalBytes(snapshot.totalBytes);switch(snapshot.state){case\"paused\":console.log(\"Upload is paused\");break;case\"running\":console.log(\"Upload is running\");break;default:break;}},function(error){console.log(\"Upload error:\",error);},function(){getDownloadURL(uploadTask.snapshot.ref).then(function(downloadURL){console.log('DownloadURL - ',downloadURL);setInputs(function(prev){return _objectSpread(_objectSpread({},prev),{},{downloadURL:downloadURL});});});});};var handleSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(e){return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:e.preventDefault();_context.prev=1;_context.next=4;return axios.post(\"http://127.0.0.1:5000/api/videos\",_objectSpread({},inputs));case 4:console.log('Video uploaded successfully');_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](1);console.log(\"Error uploading video:\",_context.t0);case 10:case\"end\":return _context.stop();}},_callee,null,[[1,7]]);}));return function handleSubmit(_x){return _ref.apply(this,arguments);};}();var handleDownloadAndPlay=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(){var response,blob,url,link;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return fetch('http://127.0.0.1:5000/api/download-video');case 3:response=_context2.sent;if(response.ok){_context2.next=6;break;}throw new Error('Failed to fetch video');case 6:_context2.next=8;return response.blob();case 8:blob=_context2.sent;url=window.URL.createObjectURL(blob);console.log(\"Downloaded video URL:\",url);setDownloadedVideoURL(url);// Create a link element to trigger the download\nlink=document.createElement('a');link.href=url;link.setAttribute('download','downloaded_video.mp4');document.body.appendChild(link);link.click();document.body.removeChild(link);_context2.next=23;break;case 20:_context2.prev=20;_context2.t0=_context2[\"catch\"](0);console.error('Error downloading video:',_context2.t0);case 23:case\"end\":return _context2.stop();}},_callee2,null,[[0,20]]);}));return function handleDownloadAndPlay(){return _ref2.apply(this,arguments);};}();useEffect(function(){if(downloadedVideoURL&&videoRef.current){videoRef.current.src=downloadedVideoURL;videoRef.current.load();videoRef.current.play().catch(function(error){return console.error('Error playing video:',error);});}},[downloadedVideoURL]);return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-black h-full\",children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsx(\"h1\",{className:\"mt-10 mb-6 text-center text-white text-3xl\",children:\"Getting 3D Plots\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-center text-white mb-6 text-lg mt-10\",children:\"Upload your walking video to get 3D joint points pin pointed on your body. You can download the video by clicking on the Download Processed Video.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"relative w-full h-[950px]\",children:[/*#__PURE__*/_jsx(\"video\",{autoPlay:true,loop:true,muted:true,id:\"video\",className:\"w-full h-[700px] mt-40\",children:/*#__PURE__*/_jsx(\"source\",{src:videoF,type:\"video/mp4\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"upload bg-black text-white w-full md:h-[1100px] sm:h-[800px] text-white flex flex-col items-center justify-center\",children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"video\",children:\"Video:\"}),videoPerc>0&&\"Uploading: \".concat(videoPerc,\"% (\").concat(streamedBytes,\" bytes / \").concat(totalBytes,\" bytes)\"),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\"video/*\",id:\"video\",onChange:function onChange(e){return setVideo(e.target.files[0]);}}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF] ml-2 rounded-full hover:text-black border-white border-3\",style:{width:'350px'},children:\"Upload\"})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{onClick:handleDownloadAndPlay,className:\"font-large texl-3xl hover:scale-110 mt-10 p-4 hover:bg-[#F1F8FF] rounded-full hover:text-black border-white border-3\",style:{width:'350px'},children:\"Download and Play Processed Video\"}),/*#__PURE__*/_jsx(\"br\",{})]}),/*#__PURE__*/_jsx(Newsletter,{})]})]});}export default Dplot;//https://firebasestorage.googleapis.com/v0/b/gaitguru-backend.appspot.com/o/processed_videos%2Foutput_video.mp4?alt=media&token=429490ca-006a-499f-9116-98d726c47a00","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","getDownloadURL","uploadBytesResumable","ref","getStorage","app","Navbar","videoF","Newsletter","jsx","_jsx","jsxs","_jsxs","Dplot","_useState","undefined","_useState2","_slicedToArray","video","setVideo","_useState3","_useState4","videoPerc","setVideoPerc","_useState5","_useState6","inputs","setInputs","_useState7","_useState8","streamedBytes","setStreamedBytes","_useState9","_useState10","totalBytes","setTotalBytes","_useState11","_useState12","downloadedVideoURL","setDownloadedVideoURL","videoRef","uploadFile","file","storage","folder","fileName","Date","getTime","name","storageRef","uploadTask","on","snapshot","progress","bytesTransferred","Math","round","console","log","concat","state","error","then","downloadURL","prev","_objectSpread","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","wrap","_callee$","_context","next","preventDefault","post","t0","stop","_x","apply","arguments","handleDownloadAndPlay","_ref2","_callee2","response","blob","url","link","_callee2$","_context2","fetch","sent","ok","Error","window","URL","createObjectURL","document","createElement","href","setAttribute","body","appendChild","click","removeChild","current","src","load","play","catch","className","children","autoPlay","loop","muted","id","type","onSubmit","htmlFor","accept","onChange","target","files","style","width","onClick"],"sources":["/Users/duaashahid/Desktop/gateguru/client/src/components/Dplot.jsx"],"sourcesContent":["// import React from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { useEffect, useState } from 'react'\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n\n\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n\n\n\n// function Dplot() {\n\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile=(file)=>{\n//     const storage= getStorage(app);\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress =\n//           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//        setVideoPerc(Math.round(progress));\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(error);\n//         switch (error.code) {\n//           case \"storage/unauthorized\":\n//             // User doesn't have permission to access the object\n//             console.log(error);\n//             break;\n//           case \"storage/canceled\":\n//             // User canceled the upload\n//             break;\n//           case \"storage/unknown\":\n//             // Unknown error occurred, inspect error.serverResponse\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       () => {\n//         // Upload completed successfully, now we can get the download URL\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//                downloadURL,\n//             };\n//           });\n\n//         });\n//       }\n//     );\n\n//   }\n\n\n\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n//   //   try {\n//   //     await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//   //     window.location.reload();\n//   //   } catch (error) {\n//   //     console.log(error);\n//   //   }\n//   // };\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//         await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//         window.location.reload();\n//     } catch (error) {\n//         console.log(\"Error:\", error);\n//         if (error.response) {\n//             // Request was made and server responded with a status code\n//             console.log(\"Status code:\", error.response.status);\n//             console.log(\"Response data:\", error.response.data);\n//         } else if (error.request) {\n//             // Request was made but no response was received\n//             console.log(\"No response received:\", error.request);\n//         } else {\n//             // Something else went wrong\n//             console.log(\"Error:\", error.message);\n//         }\n//     }\n// };\n\n//   // http://localhost:5000/api/videos\n\n//   const divStyle = {\n//     position: \"relative\", // Make the div relative\n//     // Add other CSS styles as needed\n//   };\n\n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] py-20\" style={divStyle}>\n//         <video\n//           autoPlay\n//           loop\n//           muted\n//           id=\"video\"\n//           className=\"w-full h-[700px] \"\n//         >\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n          \n//       {/* <div className=\" w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\">\n//       <h1 className=\"text-5xl text-white font-semibold pt-20 md:mx-90\"style={{fontFamily: 'Roboto ',textAlign:\"center\"}}> Upload your video !</h1>\n      \n//        <button className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n  \n//       </div> */}\n\n//       <div className=\"upload bg-black text-white mt-20 w-full md:h-[600px]  bg-black  sm:h-[800px] pt-5 text-white flex flex-col items-center\" >\n        \n//         <form onSubmit={handleSubmit}> \n//         <label htmlFor=\"video\">Video:</label> {videoPerc > 0 && \"Uploading: \" + videoPerc + \"%\"}\n//         <br/>\n//         <input\n//         type=\"file\"\n//         accept=\"video/*\"\n//         id=\"video\"       \n//         onChange={(e) => setVideo((prev) => e.target.files[0])}\n//          />\n//         <br/>\n//         <button  type=\"submit\" className=\"font-large texl-3xl hover:scale-110 my-20  p-4 hover:bg-[#F1F8FF] hover:scale-110 rounded-full hover:text-black border-white border-3\"   style={{ width: '200px' }}> Upload</button>\n\n//         </form>\n//       </div>\n\n      \n//       </div>\n\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n\n\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n\n// import Navbar from \"./Navbar\";\n// import { getStorage, ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\n// import app from '../firebase';\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   // const [processedVideoData, setProcessedVideoData] = useState(null);\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder =  \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage,folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//       // window.location.reload();\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleFetchProcessedVideo = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/output-video`, { responseType: 'arraybuffer' });\n//   //     console.log(\"Response:\", response);\n  \n//   //     // Create a Blob from the array buffer\n//   //     const blob = new Blob([response.data], { type: 'video/mp4' });\n  \n//   //     // Generate a URL for the blob\n//   //     const url = URL.createObjectURL(blob);\n  \n//   //     // Set the URL as the source for the video element\n//   //     setProcessedVideoData(url);\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching processed video:\", error);\n//   //   }\n//   // };\n  \n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n//             <br />\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '250px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n          \n//           <br />\n\n//           <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n\n//           <br/>\n\n//           {/* <button\n//             onClick={handleFetchProcessedVideo}\n//             className=\"font-large texl-3xl hover:scale-110 mt-1 mb-10 p-4 hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3 justify-center mr-20\"\n//             style={{ width: '200px' }}\n//           >\n//             Fetch Processed Video\n//           </button>\n//           <br />\n//           {processedVideoData && (\n//             <video autoPlay controls className=\"w-[800px] h-[800px]\">\n//               <source src={processedVideoData} type=\"video/mp4\" />\n//               Your browser does not support the video tag.\n//             </video>\n//           )} */}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\n\n\n\n\n\n\n\n\n\n\n/////////prettty pleasinnnnnn\n\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { getDownloadURL,uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\n// import app from '../firebase';\n// import Navbar from \"./Navbar\";\n// import videoF from \"../../src/pictures-olive/vi.mp4\";\n\n// function Dplot() {\n//   const [video, setVideo] = useState(undefined);\n//   const [videoPerc, setVideoPerc] = useState(0);\n//   const [inputs, setInputs] = useState({});\n//   const [streamedBytes, setStreamedBytes] = useState(0);\n//   const [totalBytes, setTotalBytes] = useState(0);\n\n//   useEffect(() => {\n//     video && uploadFile(video);\n//   }, [video]);\n\n//   const uploadFile = (file) => {\n//     const storage = getStorage(app);\n//     const folder = \"input_videos/\";\n//     const fileName = new Date().getTime() + file.name;\n//     const storageRef = ref(storage, folder + fileName);\n//     const uploadTask = uploadBytesResumable(storageRef, file);\n\n//     uploadTask.on(\n//       \"state_changed\",\n//       (snapshot) => {\n//         const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n//         setVideoPerc(Math.round(progress));\n//         console.log(`Upload progress: ${Math.round(progress)}%`);\n//         setStreamedBytes(snapshot.bytesTransferred);\n//         setTotalBytes(snapshot.totalBytes);\n//         switch (snapshot.state) {\n//           case \"paused\":\n//             console.log(\"Upload is paused\");\n//             break;\n//           case \"running\":\n//             console.log(\"Upload is running\");\n//             break;\n//           default:\n//             break;\n//         }\n//       },\n//       (error) => {\n//         console.log(\"Upload error:\", error);\n//       },\n//       () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n//           console.log('DownloadURL - ', downloadURL);\n//           setInputs((prev) => {\n//             return {\n//               ...prev,\n//               downloadURL,\n//             };\n//           });\n//         });\n//       }\n//     );\n//   };\n\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n//       console.log('Video uploaded successfully');\n//     } catch (error) {\n//       console.log(\"Error uploading video:\", error);\n//     }\n//   };\n\n//   // const handleDownload = async () => {\n//   //   try {\n//   //     const response = await axios.get(`http://127.0.0.1:5000/api/download-video`);\n//   //     const { videoURL,jsonURLs} = response.data;\n      \n//   //     // Log processed video URL\n//   //     console.log('Processed Video URL:', videoURL);\n  \n//   //     // // Log JSON file URLs\n//   //     // console.log('JSON File URLs:');\n//   //     // jsonURLs.forEach((url, index) => {\n//   //     //   console.log(`JSON File ${index + 1}:`, url);\n//   //     // });\n//   //   } catch (error) {\n//   //     console.log(\"Error fetching video URLs:\", error);\n//   //   }\n//   // };\n\n\n//   //try 1 the issue was video was not playing\n\n// //   const handleDownload = async () => {\n// //     try {\n// //         const response = await axios.get(`http://127.0.0.1:5000/api/download-video`, {\n// //             responseType: 'blob' // Specify responseType as 'blob'\n// //         });\n// //         const { videoURL } = response.data;\n        \n// //         // Log processed video URL\n// //         console.log('Processed Video URL:', videoURL);\n\n// //         // Create a temporary URL for the blob\n// //         const url = window.URL.createObjectURL(new Blob([response.data]));\n\n// //         // Create a link element\n// //         const link = document.createElement('a');\n// //         link.href = url;\n// //         link.setAttribute('download', 'downloaded-video.mp4');\n\n// //         // Append the link to the body\n// //         document.body.appendChild(link);\n\n// //         // Programmatically click the link to trigger the download\n// //         link.click();\n\n// //         // Cleanup: remove the link and revoke the blob URL\n// //         link.parentNode.removeChild(link);\n// //         window.URL.revokeObjectURL(url);\n\n// //     } catch (error) {\n// //         console.log(\"Error fetching video URLs:\", error);\n// //     }\n// // };\n\n\n// //try 2\n// const handleDownload = async () => {\n//   try {\n//       // Send a GET request to the server to fetch the video file\n//       const response = await fetch('http://127.0.0.1:5000/api/download-video');\n      \n//       // Check if the response is successful (status code 200)\n//       if (!response.ok) {\n//           throw new Error('Failed to fetch video');\n//       }\n\n//       // Extract the filename from the response headers or set a default name\n//       const filename = response.headers.get('content-disposition')?.split('filename=')[1] || 'downloaded-video.mp4';\n\n//       // Convert the response to a blob\n//       const blob = await response.blob();\n\n//       // Create a temporary URL for the blob\n//       const url = window.URL.createObjectURL(blob);\n\n//       // Create a link element to trigger the download\n//       const link = document.createElement('a');\n//       link.href = url;\n//       link.setAttribute('download', filename);\n\n//       // Append the link to the document body and programmatically click it\n//       document.body.appendChild(link);\n//       link.click();\n\n//       // Clean up by removing the link and revoking the object URL\n//       link.parentNode.removeChild(link);\n//       window.URL.revokeObjectURL(url);\n//   } catch (error) {\n//       console.error('Error downloading video:', error);\n//   }\n// };\n\n// const handlePlay = () => {\n//  // Replace 'path/to/your/video.mp4' with the actual path to your video file\n//   const videoPath = '/Users/duaashahid/Desktop/gateguru/flask_backend/output/output_video.mp4';\n\n//   // Create a new video element\n//   const video = document.createElement('video');\n//   video.src = videoPath;\n//   video.controls = true; // Show controls like play, pause, etc.\n\n//   // Append the video element to the document body\n//   document.body.appendChild(video);\n\n//   // Play the video\n//   video.play();\n\n\n//   // <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//   //         <source src={videoFo} type=\"video/mp4\" />\n//   //       </video>\n// };\n\n  \n  \n//   return (\n//     <div className=\"bg-black h-full\">\n//       <Navbar />\n//       <h1 className=\"mt-10 mb-6 text-center text-white text-3xl\">Getting 3D Plots</h1>\n//         <p className=\"text-center text-white mb-6 text-lg mt-10\">\n//           Upload your walking video to get get 3D joint point pin pointed on your body, You can download the video by clicking on the Download Processed Video\n//         </p>\n\n      \n//       <div className=\"relative w-full h-[950px] \">\n//         <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n//           <source src={videoF} type=\"video/mp4\" />\n//         </video>\n\n//         <div className=\"upload bg-black text-white  w-full md:h-[1100px] sm:h-[800px]  text-white flex flex-col items-center justify-center\">\n//           <form onSubmit={handleSubmit}>\n//             <label htmlFor=\"video\">Video:</label>\n//             {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n//             <br />\n//             <input\n//               type=\"file\"\n//               accept=\"video/*\"\n//               id=\"video\"\n//               onChange={(e) => setVideo(e.target.files[0])}\n//             />\n            \n//             <br/>\n\n//             <button\n//               type=\"submit\"\n//               className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF] ml-2  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Upload\n//             </button>\n//           </form>\n          \n//           <br />\n\n//           <button\n//               onClick={handleDownload}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Download Processed Video\n//             </button>\n//             <br/>\n//             <button\n//              onClick={handlePlay}\n//               className=\"font-large texl-3xl hover:scale-110 mt-10 p-4   hover:bg-[#F1F8FF]  rounded-full hover:text-black border-white border-3\"\n//               style={{ width: '350px' }}\n//             >\n//               Play\n//             </button>\n\n//           <br/>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Dplot;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { getDownloadURL, uploadBytesResumable, ref, getStorage } from \"firebase/storage\";\nimport app from '../firebase';\nimport Navbar from \"./Navbar\";\nimport videoF from \"../../src/pictures-olive/vi.mp4\";\nimport Newsletter from \"./Newsletter.jsx\";\n\nfunction Dplot() {\n  const [video, setVideo] = useState(undefined);\n  const [videoPerc, setVideoPerc] = useState(0);\n  const [inputs, setInputs] = useState({});\n  const [streamedBytes, setStreamedBytes] = useState(0);\n  const [totalBytes, setTotalBytes] = useState(0);\n  const [downloadedVideoURL, setDownloadedVideoURL] = useState(\"\");\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    video && uploadFile(video);\n  }, [video]);\n\n  const uploadFile = (file) => {\n    const storage = getStorage(app);\n    const folder = \"input_videos/\";\n    const fileName = new Date().getTime() + file.name;\n    const storageRef = ref(storage, folder + fileName);\n    const uploadTask = uploadBytesResumable(storageRef, file);\n\n    uploadTask.on(\n      \"state_changed\",\n      (snapshot) => {\n        const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        setVideoPerc(Math.round(progress));\n        console.log(`Upload progress: ${Math.round(progress)}%`);\n        setStreamedBytes(snapshot.bytesTransferred);\n        setTotalBytes(snapshot.totalBytes);\n        switch (snapshot.state) {\n          case \"paused\":\n            console.log(\"Upload is paused\");\n            break;\n          case \"running\":\n            console.log(\"Upload is running\");\n            break;\n          default:\n            break;\n        }\n      },\n      (error) => {\n        console.log(\"Upload error:\", error);\n      },\n      () => {\n        getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n          console.log('DownloadURL - ', downloadURL);\n          setInputs((prev) => {\n            return {\n              ...prev,\n              downloadURL,\n            };\n          });\n        });\n      }\n    );\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      await axios.post(`http://127.0.0.1:5000/api/videos`, { ...inputs });\n      console.log('Video uploaded successfully');\n    } catch (error) {\n      console.log(\"Error uploading video:\", error);\n    }\n  };\n\n  const handleDownloadAndPlay = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/download-video');\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch video');\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      console.log(\"Downloaded video URL:\", url);\n      setDownloadedVideoURL(url);\n\n      // Create a link element to trigger the download\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'downloaded_video.mp4');\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    } catch (error) {\n      console.error('Error downloading video:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (downloadedVideoURL && videoRef.current) {\n      videoRef.current.src = downloadedVideoURL;\n      videoRef.current.load();\n      videoRef.current.play().catch(error => console.error('Error playing video:', error));\n    }\n  }, [downloadedVideoURL]);\n\n  return (\n    <div className=\"bg-black h-full\">\n      <Navbar />\n      <h1 className=\"mt-10 mb-6 text-center text-white text-3xl\">Getting 3D Plots</h1>\n      <p className=\"text-center text-white mb-6 text-lg mt-10\">\n        Upload your walking video to get 3D joint points pin pointed on your body. You can download the video by clicking on the Download Processed Video.\n      </p>\n\n      <div className=\"relative w-full h-[950px]\">\n        <video autoPlay loop muted id=\"video\" className=\"w-full h-[700px] mt-40\">\n          <source src={videoF} type=\"video/mp4\" />\n        </video>\n\n        <div className=\"upload bg-black text-white w-full md:h-[1100px] sm:h-[800px] text-white flex flex-col items-center justify-center\">\n          <form onSubmit={handleSubmit}>\n            <label htmlFor=\"video\">Video:</label>\n            {videoPerc > 0 && `Uploading: ${videoPerc}% (${streamedBytes} bytes / ${totalBytes} bytes)`}\n            <br />\n            <input\n              type=\"file\"\n              accept=\"video/*\"\n              id=\"video\"\n              onChange={(e) => setVideo(e.target.files[0])}\n            />\n            <br />\n            <button\n              type=\"submit\"\n              className=\"font-large texl-3xl hover:scale-110 mt-20 p-4 hover:bg-[#F1F8FF] ml-2 rounded-full hover:text-black border-white border-3\"\n              style={{ width: '350px' }}\n            >\n              Upload\n            </button>\n          </form>\n          <br />\n          <button\n            onClick={handleDownloadAndPlay}\n            className=\"font-large texl-3xl hover:scale-110 mt-10 p-4 hover:bg-[#F1F8FF] rounded-full hover:text-black border-white border-3\"\n            style={{ width: '350px' }}\n          >\n            Download and Play Processed Video\n          </button>\n          <br />\n          {/* <div className=\"mt-10\">\n            <video controls className=\"w-full h-auto\" ref={videoRef}>\n              <source src={downloadedVideoURL}\n               type=\"video/mp4\" />\n              Your browser does not support the video tag.\n            </video>\n          </div> */}\n        </div>\n        <Newsletter/>\n      </div>\n    </div>\n  );\n}\n\nexport default Dplot;\n\n\n//https://firebasestorage.googleapis.com/v0/b/gaitguru-backend.appspot.com/o/processed_videos%2Foutput_video.mp4?alt=media&token=429490ca-006a-499f-9116-98d726c47a00"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}